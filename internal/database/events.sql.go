// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: events.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, created_at, updated_at, name, start_date, end_date, user_id, event_code)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, start_date, end_date, user_id, event_code
`

type CreateEventParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	UserID    uuid.UUID `json:"user_id"`
	EventCode int32     `json:"event_code"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.UserID,
		arg.EventCode,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
		&i.EventCode,
	)
	return i, err
}

const getEventByEventCode = `-- name: GetEventByEventCode :one
SELECT id, created_at, updated_at, name, start_date, end_date, user_id, event_code FROM events WHERE event_code = $1
`

func (q *Queries) GetEventByEventCode(ctx context.Context, eventCode int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByEventCode, eventCode)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
		&i.EventCode,
	)
	return i, err
}

const getEventById = `-- name: GetEventById :one
SELECT id, created_at, updated_at, name, start_date, end_date, user_id, event_code FROM events WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
		&i.EventCode,
	)
	return i, err
}

const getMyEvents = `-- name: GetMyEvents :many
SELECT id, created_at, updated_at, name, start_date, end_date, user_id, event_code FROM events WHERE user_id = $1 AND end_date < CURRENT_DATE ORDER BY start_date LIMIT 10 OFFSET $2
`

type GetMyEventsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetMyEvents(ctx context.Context, arg GetMyEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getMyEvents, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.UserID,
			&i.EventCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyEventsCount = `-- name: GetMyEventsCount :one
SELECT COUNT(*) FROM events WHERE user_id = $1 AND end_date < CURRENT_DATE
`

func (q *Queries) GetMyEventsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMyEventsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUpComingEventsCount = `-- name: GetUpComingEventsCount :one
SELECT COUNT(*) FROM events WHERE user_id = $1 AND end_date >= CURRENT_DATE
`

func (q *Queries) GetUpComingEventsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUpComingEventsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUpcomingEvents = `-- name: GetUpcomingEvents :many
SELECT id, created_at, updated_at, name, start_date, end_date, user_id, event_code FROM events WHERE user_id = $1 AND end_date >= CURRENT_DATE ORDER BY start_date LIMIT 10 OFFSET $2
`

type GetUpcomingEventsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetUpcomingEvents(ctx context.Context, arg GetUpcomingEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingEvents, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.UserID,
			&i.EventCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
