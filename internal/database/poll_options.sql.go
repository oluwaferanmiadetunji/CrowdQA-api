// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: poll_options.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPollOptions = `-- name: CreatePollOptions :one
INSERT INTO poll_options (id, created_at, updated_at, poll_id, option_text)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, poll_id, option_text
`

type CreatePollOptionsParams struct {
	ID         uuid.UUID `json:"id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	PollID     uuid.UUID `json:"poll_id"`
	OptionText string    `json:"option_text"`
}

func (q *Queries) CreatePollOptions(ctx context.Context, arg CreatePollOptionsParams) (PollOption, error) {
	row := q.db.QueryRowContext(ctx, createPollOptions,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PollID,
		arg.OptionText,
	)
	var i PollOption
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
		&i.OptionText,
	)
	return i, err
}

const getPollOptionsByPollId = `-- name: GetPollOptionsByPollId :many
SELECT id, created_at, updated_at, poll_id, option_text FROM poll_options WHERE poll_id = $1 ORDER BY created_at
`

func (q *Queries) GetPollOptionsByPollId(ctx context.Context, pollID uuid.UUID) ([]PollOption, error) {
	rows, err := q.db.QueryContext(ctx, getPollOptionsByPollId, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PollOption{}
	for rows.Next() {
		var i PollOption
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PollID,
			&i.OptionText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
