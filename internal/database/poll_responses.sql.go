// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: poll_responses.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPollResponse = `-- name: CreatePollResponse :one
INSERT INTO poll_responses (id, created_at, updated_at, poll_id, user_id, selected_option, user_answer, user_ranking, user_rating)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, poll_id, user_id, selected_option, user_answer, user_ranking, user_rating
`

type CreatePollResponseParams struct {
	ID             uuid.UUID      `json:"id"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	PollID         uuid.UUID      `json:"poll_id"`
	UserID         sql.NullString `json:"user_id"`
	SelectedOption sql.NullInt32  `json:"selected_option"`
	UserAnswer     sql.NullString `json:"user_answer"`
	UserRanking    []int32        `json:"user_ranking"`
	UserRating     sql.NullInt32  `json:"user_rating"`
}

func (q *Queries) CreatePollResponse(ctx context.Context, arg CreatePollResponseParams) (PollResponse, error) {
	row := q.db.QueryRowContext(ctx, createPollResponse,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PollID,
		arg.UserID,
		arg.SelectedOption,
		arg.UserAnswer,
		pq.Array(arg.UserRanking),
		arg.UserRating,
	)
	var i PollResponse
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
		&i.UserID,
		&i.SelectedOption,
		&i.UserAnswer,
		pq.Array(&i.UserRanking),
		&i.UserRating,
	)
	return i, err
}

const getPollResponsesByPollId = `-- name: GetPollResponsesByPollId :many
SELECT id, created_at, updated_at, poll_id, user_id, selected_option, user_answer, user_ranking, user_rating FROM poll_responses WHERE poll_id = $1 ORDER BY created_at
`

func (q *Queries) GetPollResponsesByPollId(ctx context.Context, pollID uuid.UUID) ([]PollResponse, error) {
	rows, err := q.db.QueryContext(ctx, getPollResponsesByPollId, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PollResponse{}
	for rows.Next() {
		var i PollResponse
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PollID,
			&i.UserID,
			&i.SelectedOption,
			&i.UserAnswer,
			pq.Array(&i.UserRanking),
			&i.UserRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
